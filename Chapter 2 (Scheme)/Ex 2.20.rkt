#lang racket

(require rackunit)

; Упражнение 2.20.
; Процедуры +, * и list принимают произвольное число аргументов. Один из способов опреде-
; ления таких процедур состоит в использовании точечной записи (dotted-tail notation). В опре-
; делении процедуры список параметров с точкой перед именем последнего члена означает, что,
; когда процедура вызывается, начальные параметры (если они есть) будут иметь в качестве значе-
; ний начальные аргументы, как и обычно, но значением последнего параметра будет список всех
; оставшихся аргументов. Например, если дано определение
; (define (f x y . z) hтелоi)
; то процедуру f можно вызывать с двумя и более аргументами. Если мы вычисляем
; (f 1 2 3 4 5 6)
; то в теле f переменная x будет равна 1, y будет равно 2, а z будет списком (3 4 5 6). Если дано
; определение
; (define (g . w) hтелоi)
; то процедура g может вызываться с нулем и более аргументов. Если мы вычислим
; (g 1 2 3 4 5 6)
; то в теле g значением переменной w будет список (1 2 3 4 5 6).
; Используя эту нотацию, напишите процедуру same-parity, которая принимает одно или
; более целое число и возвращает список всех тех аргументов, у которых четность та же, что у
; первого аргумента. Например,
; (same-parity 1 2 3 4 5 6 7)
; (1 3 5 7)
; (same-parity 2 3 4 5 6 7)
; (2 4 6)
;-------------------------------------------------------------------

(define (append list1 list2)
  (if (null? list1) list2
      (cons (car list1)
            (append (cdr list1) list2))))

(define (filter-parity items pred first-argument)
  (define (filter-iter items acc)
    (if (null? items) acc
        (if (pred first-argument (car items))
            (filter-iter (cdr items) (append acc (list (car items))))
            (filter-iter (cdr items) acc))))
  (filter-iter items '()))

(define (is-same-parity? el1 el2)
  (cond [(and (odd? el1) (odd? el2))]
        [(and (even? el1) (even? el2))]
        [else #f]))

(define (same-parity x . z)
  (cons x (filter-parity z is-same-parity? x)))

;-------------------------------------------------------------------

;===================================================================

(check-equal? (same-parity 1 2 3 4 5 6 7) (list 1 3 5 7))
(check-equal? (same-parity 2 3 4 5 6 7) (list 2 4 6))

;===================================================================