#lang racket

(require rackunit)

; Упражнение 2.23.
; Процедура for-each похожа на map. В качестве аргументов она принимает процедуру и спи-
; сок элементов. Однако вместо того, чтобы формировать список результатов, for-each просто
; применяет процедуру по очереди ко всем элементам слева направо. Результаты применения про-
; цедуры к аргументам не используются вообще — for-each применяют к процедурам, которые
; осуществляют какое-либо действие вроде печати. Например,
; (for-each (lambda (x) (newline) (display x))
; (list 57 321 88))
; 57
; 321
; 88
; Значение, возвращаемое вызовом for-each (оно в листинге не показано) может быть каким
; угодно, например истина. Напишите реализацию for-each.
;-------------------------------------------------------------------

(define (for-each proc items)
  (if (null? items)
      '()
      (begin
        (proc (car items))
        (for-each proc (cdr items)))))

(for-each (lambda (x) (newline) (display x))
          (list 1 2 3 4 5))
      
;-------------------------------------------------------------------