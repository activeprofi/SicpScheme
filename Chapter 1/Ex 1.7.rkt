#lang racket

; Упражнение 1.7.
; Проверка good-enough?, которую мы использовали для вычисления квадратных корней, будет
; довольно неэффективна для поиска квадратных корней от очень маленьких чисел. Кроме того, в
; настоящих компьютерах арифметические операции почти всегда вычисляются с ограниченной точ-
; ностью. Поэтому наш тест оказывается неадекватным и для очень больших чисел. Альтернативный
; подход к реализации good-enough? состоит в том, чтобы следить, как от одной итерации к дру-
; гой изменяется guess, и остановиться, когда изменение оказывается небольшой долей значения
; приближения. Разработайте процедуру вычисления квадратного корня, которая использует такой
; вариант проверки на завершение. Верно ли, что на больших и маленьких числах она работает
; лучше?
;-------------------------------------------------------------------
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (square x)
  (* x x))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average a b)
  (/ (+ a b) 2))

(define (sqrt x)
  (sqrt-iter 1.0 x))
;-------------------------------------------------------------------
(sqrt 0.16)
(sqrt 250000)
;-------------------------------------------------------------------
(define (better-sqrt-iter guess prev-guess x)
  (if (better-good-enough? guess prev-guess)
      guess
      (better-sqrt-iter (improve guess x)
                 guess
                 x)))

(define (better-good-enough? guess prev-guess)
  (< (abs (/ (- guess prev-guess) prev-guess)) 0.001))

(define (better-sqrt x)
  (better-sqrt-iter 1.0 0.5 x))
;-------------------------------------------------------------------
(better-sqrt 0.16)
(better-sqrt 250000)
;===================================================================